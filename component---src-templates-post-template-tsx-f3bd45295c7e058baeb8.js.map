{"version":3,"file":"component---src-templates-post-template-tsx-f3bd45295c7e058baeb8.js","mappings":"oQA4BA,MAjBA,YAAsE,IAA9CA,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,WAGnC,OACE,QAACC,EAAD,MACE,QAACC,EAAD,CAAcC,QAJK,kBAAMC,OAAOC,QAAQC,UAKtC,QAAC,IAAD,CAAiBC,KAAMC,EAAAA,QAEzB,QAACC,EAAD,KAAQX,IACR,QAACY,EAAD,MACE,mBAAMV,EAAWW,KAAK,SACtB,mBAAMZ,MAQRE,GAAmB,4NAenBC,GAAY,8SAmBZO,GAAK,+SAiBLC,GAAQ,kRCzDd,MATA,YAAyE,IAArDZ,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,WAAYY,EAA2B,EAA3BA,UAC3C,OACE,QAACC,EAAD,KACGD,IAAa,QAACE,EAAD,CAAiBC,MAAOH,EAAWI,IAAI,cACrD,QAAC,EAAD,CAAclB,MAAOA,EAAOC,KAAMA,EAAMC,WAAYA,MAOpDa,GAAe,iJAUfC,GAAkB,QAAO,SAACG,GAAD,OAC7B,QAAC,EAAAC,GAAD,UAAiBD,EAAjB,CAAwBE,MAAO,CAAEC,SAAU,iBADrB,sBAAH,gJCzBrB,IAAMC,GAAgB,g+BA4HtB,EAhIA,YAAiD,IAA1BC,EAAyB,EAAzBA,KACrB,OAAO,QAACD,EAAD,CAAkBE,wBAAyB,CAAEC,OAAQF,MCmC9D,MA3BA,WACE,IAAMG,GAAUC,EAAAA,EAAAA,aAuBhB,OArBAC,EAAAA,EAAAA,YAAU,WACR,GAAwB,OAApBF,EAAQG,QAAZ,CACA,IAAMC,EAA+BC,SAASC,cAAc,UAEtDC,EAAsC,CAC1CC,IArBM,gCAsBNC,KArBO,mBAsBP,aAAc,WACdC,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDd,EAAUe,aAAaF,EAAKC,MAG9BlB,EAAQG,QAAQiB,YAAYhB,MAC3B,KAEI,QAACiB,EAAD,CAAgBC,IAAKtB,KAKxBqB,GAAc,uGCiBpB,MApCA,YAKsB,IAHGE,EAGJ,EAJnBC,KACEC,kBAAqBF,MAEXG,EACO,EADnBC,SAAYD,KAEZ,EAeIH,EAAM,GAdRK,KACE/B,EAFJ,EAEIA,KAFJ,IAGIgC,YACExD,EAJN,EAIMA,MACAyD,EALN,EAKMA,QACAxD,EANN,EAMMA,KACAC,EAPN,EAOMA,WAPN,KAQMwD,cARN,EASM5C,WACqB6C,EAV3B,EAUQC,gBAAmBD,gBACnBE,EAXR,EAWQA,UAKR,OACE,QAACC,EAAA,EAAD,CAAW9D,MAAOA,EAAO+D,YAAaN,EAASO,IAAKX,EAAMpC,MAAO4C,IAC/D,QAAC,EAAD,CACE7D,MAAOA,EACPC,KAAMA,EACNC,WAAYA,EACZY,UAAW6C,KAEb,QAAC,EAAD,CAAanC,KAAMA,KACnB,QAAC,EAAD","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/Comment.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport type PostHeadInfoType = {\r\n  title: string\r\n  date: string\r\n  categories: string[]\r\n}\r\n\r\nfunction PostHeadInfo({ title, date, categories }: PostHeadInfoType) {\r\n  const handleBackPage = () => window.history.back()\r\n\r\n  return (\r\n    <PostHeadInfoWrapper>\r\n      <PrevPageIcon onClick={handleBackPage}>\r\n        <FontAwesomeIcon icon={faArrowLeft} />\r\n      </PrevPageIcon>\r\n      <Title>{title}</Title>\r\n      <PostData>\r\n        <div>{categories.join(' / ')}</div>\r\n        <div>{date}</div>\r\n      </PostData>\r\n    </PostHeadInfoWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHeadInfo\r\n\r\nconst PostHeadInfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 768px;\r\n  height: 100%;\r\n  margin: 0 auto;\r\n  padding: 60px 0;\r\n  color: #ffffff;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 40px 20px;\r\n  }\r\n`\r\n\r\nconst PrevPageIcon = styled.div`\r\n  display: grid;\r\n  place-items: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  background: #ffffff;\r\n  color: #000000;\r\n  font-size: 22px;\r\n  cursor: pointer;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n\r\n  @media (max-width: 768px) {\r\n    width: 30px;\r\n    height: 30px;\r\n    font-size: 18px;\r\n  }\r\n`\r\n\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  overflow-wrap: break-word;\r\n  margin-top: auto;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 45px;\r\n  font-weight: 800;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 30px;\r\n  }\r\n`\r\n\r\nconst PostData = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 10px;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    font-size: 15px;\r\n    font-weight: 400;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport PostHeadInfo, { PostHeadInfoType } from './PostHeadInfo'\r\n\r\ntype GatsbyImgType = {\r\n  image: IGatsbyImageData\r\n  alt: string\r\n  className?: string\r\n}\r\n\r\ntype PostHeadType = PostHeadInfoType & {\r\n  thumbnail?: IGatsbyImageData\r\n}\r\n\r\nfunction PostHead({ title, date, categories, thumbnail }: PostHeadType) {\r\n  return (\r\n    <PostHeadWrapper>\r\n      {thumbnail && <BackgroundImage image={thumbnail} alt=\"thumnail\" />}\r\n      <PostHeadInfo title={title} date={date} categories={categories} />\r\n    </PostHeadWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHead\r\n\r\nconst PostHeadWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 400px;\r\n\r\n  @media (max-width: 768px) {\r\n    height: 300px;\r\n  }\r\n`\r\n\r\nconst BackgroundImage = styled((props: GatsbyImgType) => (\r\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\r\n))`\r\n  z-index: -1;\r\n  width: 100%;\r\n  height: 400px;\r\n  object-fit: cover;\r\n  filter: brightness(0.25);\r\n\r\n  @media (max-width: 768px) {\r\n    height: 300px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\ntype PostContentType = {\r\n  html: string\r\n}\r\n\r\nfunction PostContent({ html }: PostContentType) {\r\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\r\n}\r\n\r\nconst MarkdownRenderer = styled.div`\r\n  // Renderer Style\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  padding: 100px 0;\r\n  word-break: break-all;\r\n\r\n  // Markdown Style\r\n  line-height: 1.8;\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n\r\n  // Apply Padding Attribute to All Elements\r\n  p {\r\n    padding: 3px 0;\r\n  }\r\n\r\n  // Adjust Heading Element Style\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    font-weight: 800;\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  * + h1,\r\n  * + h2,\r\n  * + h3 {\r\n    margin-top: 80px;\r\n  }\r\n\r\n  hr + h1,\r\n  hr + h2,\r\n  hr + h3 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 30px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 25px;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 20px;\r\n  }\r\n\r\n  // Adjust Quotation Element Style\r\n  blockquote {\r\n    margin: 30px 0;\r\n    padding: 5px 15px;\r\n    border-left: 2px solid #000000;\r\n    font-weight: 800;\r\n  }\r\n\r\n  // Adjust List Element Style\r\n  ol,\r\n  ul {\r\n    margin-left: 20px;\r\n    padding: 30px 0;\r\n  }\r\n\r\n  // Adjust Horizontal Rule style\r\n  hr {\r\n    border: 1px solid #000000;\r\n    margin: 100px 0;\r\n  }\r\n\r\n  // Adjust Link Element Style\r\n  a {\r\n    color: #4263eb;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  // Adjust Code Style\r\n  pre[class*='language-'] {\r\n    margin: 30px 0;\r\n    padding: 15px;\r\n    font-size: 15px;\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n      background: rgba(255, 255, 255, 0.5);\r\n      border-radius: 3px;\r\n    }\r\n  }\r\n\r\n  code[class*='language-'],\r\n  pre[class*='language-'] {\r\n    tab-size: 2;\r\n  }\r\n\r\n  // Markdown Responsive Design\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 80px 20px;\r\n    line-height: 1.6;\r\n    font-size: 14px;\r\n\r\n    h1 {\r\n      font-size: 23px;\r\n    }\r\n\r\n    h2 {\r\n      font-size: 20px;\r\n    }\r\n\r\n    h3 {\r\n      font-size: 17px;\r\n    }\r\n\r\n    img {\r\n      width: 100%;\r\n    }\r\n\r\n    hr {\r\n      margin: 50px 0;\r\n    }\r\n  }\r\n`\r\n\r\nexport default PostContent\r\n","import React, { createRef, useEffect } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = 'leejy001/leeblog'\r\n\r\ntype UtteranceAttributesType = {\r\n  src: string\r\n  repo: string\r\n  'issue-term': string\r\n  label: string\r\n  theme: string\r\n  crossorigin: string\r\n  async: string\r\n}\r\n\r\nfunction Comment() {\r\n  const element = createRef<HTMLDivElement>()\r\n\r\n  useEffect(() => {\r\n    if (element.current === null) return\r\n    const utterance: HTMLScriptElement = document.createElement('script')\r\n\r\n    const attributes: UtteranceAttributesType = {\r\n      src,\r\n      repo,\r\n      'issue-term': 'pathname',\r\n      label: 'Comment',\r\n      theme: 'github-light',\r\n      crossorigin: 'anonymous',\r\n      async: 'true',\r\n    }\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterance.setAttribute(key, value)\r\n    })\r\n\r\n    element.current.appendChild(utterance)\r\n  }, [])\r\n\r\n  return <CommentWrapper ref={element} />\r\n}\r\n\r\nexport default Comment\r\n\r\nconst CommentWrapper = styled.div`\r\n  @media (max-width: 768px) {\r\n    padding: 0 20px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport { PostFrontmatterType } from 'types/PostItem.types'\r\nimport Container from '../components/Common/Container'\r\nimport PostHead from '../components/Post/PostHead'\r\nimport PostContent from 'components/Post/PostContent'\r\nimport Comment from 'components/Post/Comment'\r\n\r\nexport type PostPageItemType = {\r\n  node: {\r\n    html: string\r\n    frontmatter: PostFrontmatterType\r\n  }\r\n}\r\n\r\ntype PostTemplateType = {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: PostPageItemType[]\r\n    }\r\n  }\r\n  location: {\r\n    href: string\r\n  }\r\n}\r\n\r\nfunction PostTemplate({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n  location: { href },\r\n}: PostTemplateType) {\r\n  const {\r\n    node: {\r\n      html,\r\n      frontmatter: {\r\n        title,\r\n        summary,\r\n        date,\r\n        categories,\r\n        showThumbnail,\r\n        thumbnail: {\r\n          childImageSharp: { gatsbyImageData },\r\n          publicURL,\r\n        },\r\n      },\r\n    },\r\n  } = edges[0]\r\n  return (\r\n    <Container title={title} description={summary} url={href} image={publicURL}>\r\n      <PostHead\r\n        title={title}\r\n        date={date}\r\n        categories={categories}\r\n        thumbnail={gatsbyImageData}\r\n      />\r\n      <PostContent html={html} />\r\n      <Comment />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default PostTemplate\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            showThumbnail\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["title","date","categories","PostHeadInfoWrapper","PrevPageIcon","onClick","window","history","back","icon","faArrowLeft","Title","PostData","join","thumbnail","PostHeadWrapper","BackgroundImage","image","alt","props","G","style","position","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","element","createRef","useEffect","current","utterance","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","CommentWrapper","ref","edges","data","allMarkdownRemark","href","location","node","frontmatter","summary","showThumbnail","gatsbyImageData","childImageSharp","publicURL","Container","description","url"],"sourceRoot":""}