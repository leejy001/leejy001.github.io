{"version":3,"file":"component---src-pages-categories-tsx-240a92716d1b90a89842.js","mappings":"kQAsCA,MAnBA,YAA8E,IAAtDA,EAAqD,EAArDA,iBAAkBC,EAAmC,EAAnCA,aACxC,OACE,QAACC,EAAD,MACE,QAACC,EAAD,KACGC,OAAOC,QAAQJ,GAAcK,KAAI,gBAAEC,EAAF,KAAQC,EAAR,YAChC,QAACC,EAAD,CACEC,GAAE,aAAeH,EACjBI,OAAQJ,IAASP,EACjBY,IAAKL,GAEJA,GACD,oBAAOC,UAUbN,GAAmB,iKAUnBC,GAAO,sGAMPM,GAAe,QAAO,cAAGE,OAAH,IAAcE,ECxD3B,SAAuCC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIF,EAAKI,EAFLC,EAAS,GACTC,EAAad,OAAOe,KAAKL,GAG7B,IAAKE,EAAI,EAAGA,EAAIE,EAAWE,OAAQJ,IACjCJ,EAAMM,EAAWF,GACbD,EAASM,QAAQT,IAAQ,IAC7BK,EAAOL,GAAOE,EAAOF,IAGvB,OAAOK,ED4CmB,aAC1B,QAAC,KAASJ,KADS,sBAAH,2HASD,qBAAGF,OAAuB,MAAQ,QATjC,0K,UE6BlB,MAxDA,YASmB,IARLW,EAQK,EARjBC,SAAYD,OAQK,IAPjBE,KAOiB,IANfC,KACEC,aAAgBC,EAKH,EALGA,MAAOC,EAKV,EALUA,YAAaC,EAKvB,EALuBA,QAEjBC,EAGN,EAHfC,kBAAqBD,MACbE,EAEO,EAFfC,KAAQD,UAGJE,EAA8BC,EAAAA,MAAkBb,GAChDtB,EACuB,iBAApBkC,EAAOE,UAA0BF,EAAOE,SAE3CF,EAAOE,SADP,MAGAnC,GAAeoC,EAAAA,EAAAA,UACnB,kBACEP,EAAMQ,QACJ,SACEC,EADF,GAcE,OAPG,EAJDC,KACEC,YAAeC,WAIRC,SAAQ,SAAAP,QACMQ,IAAnBL,EAAKH,GAAyBG,EAAKH,GAAY,EAC9CG,EAAKH,QAEZG,EAAI,MAEGA,IAET,CAAEM,IAAK,MAEX,IAGF,OACE,QAACC,EAAA,EAAD,CACEnB,MAAOA,EACPC,YAAaA,EACbmB,IAAKlB,EACLmB,MAAOhB,IAEP,QAAC,EAAD,CACEhC,iBAAkBA,EAClBC,aAAcA,KAEhB,QAACgD,EAAA,EAAD,CAAUjD,iBAAkBA,EAAkBkD,MAAOpB","sources":["webpack://gatsby-starter-default/./src/components/Main/CategoryList.tsx","webpack://gatsby-starter-default/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://gatsby-starter-default/./src/pages/categories.tsx"],"sourcesContent":["import React, { ReactNode } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\n\r\nexport type CategoryListTypes = {\r\n  selectedCategory: string\r\n  categoryList: { [key: string]: number }\r\n}\r\n\r\ntype CategoryItemTypes = {\r\n  active: boolean\r\n}\r\n\r\ntype GatsbyLinkTypes = {\r\n  children: ReactNode\r\n  className?: string\r\n  to: string\r\n} & CategoryItemTypes\r\n\r\nfunction CategoryList({ selectedCategory, categoryList }: CategoryListTypes) {\r\n  return (\r\n    <CategoryListWrapper>\r\n      <Wrapper>\r\n        {Object.entries(categoryList).map(([name, count]) => (\r\n          <CategoryItem\r\n            to={`?category=${name}`}\r\n            active={name === selectedCategory}\r\n            key={name}\r\n          >\r\n            {name}\r\n            <span>{count}</span>\r\n          </CategoryItem>\r\n        ))}\r\n      </Wrapper>\r\n    </CategoryListWrapper>\r\n  )\r\n}\r\n\r\nexport default CategoryList\r\n\r\nconst CategoryListWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 1024px;\r\n  margin: 15px auto 0;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin: auto;\r\n`\r\n\r\nconst CategoryItem = styled(({ active, ...props }: GatsbyLinkTypes) => (\r\n  <Link {...props} />\r\n))<CategoryItemTypes>`\r\n  background-color: #08c1ce;\r\n  border-radius: 5px;\r\n  margin-right: 20px;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 16px;\r\n  font-weight: ${({ active }) => (active ? '800' : '400')};\r\n  cursor: pointer;\r\n  &:last-of-type {\r\n    margin-right: 0;\r\n  }\r\n  span {\r\n    background-color: white;\r\n    padding: 0 5px;\r\n    border-radius: 5px;\r\n    margin-left: 5px;\r\n  }\r\n  @media (max-width: 768px) {\r\n    font-size: 14px;\r\n  }\r\n`\r\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, { useMemo } from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport queryString, { ParsedQuery } from 'query-string'\r\nimport Container from 'components/Common/Container'\r\nimport CategoryList, { CategoryListTypes } from 'components/Main/CategoryList'\r\nimport PostList from 'components/Main/PostList'\r\nimport { PostItemType } from 'types/PostItem.types'\r\n\r\ntype CategoriesType = {\r\n  location: {\r\n    search: string\r\n  }\r\n  data: {\r\n    site: {\r\n      siteMetadata: {\r\n        title: string\r\n        description: string\r\n        siteUrl: string\r\n      }\r\n    }\r\n    allMarkdownRemark: {\r\n      edges: PostItemType[]\r\n    }\r\n    file: {\r\n      publicURL: string\r\n    }\r\n  }\r\n}\r\n\r\nfunction CategoriesPage({\r\n  location: { search },\r\n  data: {\r\n    site: {\r\n      siteMetadata: { title, description, siteUrl },\r\n    },\r\n    allMarkdownRemark: { edges },\r\n    file: { publicURL },\r\n  },\r\n}: CategoriesType) {\r\n  const parsed: ParsedQuery<string> = queryString.parse(search)\r\n  const selectedCategory: string =\r\n    typeof parsed.category !== 'string' || !parsed.category\r\n      ? 'All'\r\n      : parsed.category\r\n\r\n  const categoryList = useMemo(\r\n    () =>\r\n      edges.reduce(\r\n        (\r\n          list: CategoryListTypes['categoryList'],\r\n          {\r\n            node: {\r\n              frontmatter: { categories },\r\n            },\r\n          }: PostItemType,\r\n        ) => {\r\n          categories.forEach(category => {\r\n            if (list[category] === undefined) list[category] = 1\r\n            else list[category]++\r\n          })\r\n          list['All']++\r\n\r\n          return list\r\n        },\r\n        { All: 0 },\r\n      ),\r\n    [],\r\n  )\r\n\r\n  return (\r\n    <Container\r\n      title={title}\r\n      description={description}\r\n      url={siteUrl}\r\n      image={publicURL}\r\n    >\r\n      <CategoryList\r\n        selectedCategory={selectedCategory}\r\n        categoryList={categoryList}\r\n      />\r\n      <PostList selectedCategory={selectedCategory} posts={edges} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default CategoriesPage\r\n\r\nexport const getCategories = graphql`\r\n  query getCategories {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        siteUrl\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\r\n      filter: { frontmatter: { categories: { ne: null } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            showThumbnail\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData(width: 768, height: 400)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    file(name: { eq: \"profile-image\" }) {\r\n      publicURL\r\n    }\r\n  }\r\n`\r\n"],"names":["selectedCategory","categoryList","CategoryListWrapper","Wrapper","Object","entries","map","name","count","CategoryItem","to","active","key","props","source","excluded","i","target","sourceKeys","keys","length","indexOf","search","location","data","site","siteMetadata","title","description","siteUrl","edges","allMarkdownRemark","publicURL","file","parsed","queryString","category","useMemo","reduce","list","node","frontmatter","categories","forEach","undefined","All","Container","url","image","PostList","posts"],"sourceRoot":""}